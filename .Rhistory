shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
getReturns("FB")
summary(getReturns("FB"))
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
cBac
cBac$C
cBac$R
cBac$ticker
cBac$full
cBac$R
summary(cBac)
table(cBac)
table(summary(cBac))
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
getReturns("FB", "GOOG")
getReturns(c("FB", "GOOG"))
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
getReturns(input$companies)
shiny::runApp('DDPProj')
rets<-getReturns(c("FB", "GOOG"))
rets
rets$
rets$full
cov(rets)
rets
cov(rets$full)
stocks <- c(
"SPY",
"EFA",
"IWM",
"VWO",
"LQD",
"HYG")
returns <- getReturns(names(stocks), freq="week")
returns <- getReturns(stocks, freq="week")
returns
str(returns)
summary(returns)
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
cov(returns)
returns
eff.frontier <- function (returns, short="no", max.allocation=NULL, risk.premium.up=.5, risk.increment=.005){
# return argument should be a m x n matrix with one column per security
# short argument is whether short-selling is allowed; default is no (short selling prohibited)
# max.allocation is the maximum % allowed for any one security (reduces concentration)
# risk.premium.up is the upper limit of the risk premium modeled (see for loop below)
# risk.increment is the increment (by) value used in the for loop
covariance <- cov(returns)
print(covariance)
n <- ncol(covariance)
# Create initial Amat and bvec assuming only equality constraint (short-selling is allowed, no allocation constraints)
Amat <- matrix (1, nrow=n)
bvec <- 1
meq <- 1
# Then modify the Amat and bvec if short-selling is prohibited
if(short=="no"){
Amat <- cbind(1, diag(n))
bvec <- c(bvec, rep(0, n))
}
# And modify Amat and bvec if a max allocation (concentration) is specified
if(!is.null(max.allocation)){
if(max.allocation > 1 | max.allocation <0){
stop("max.allocation must be greater than 0 and less than 1")
}
if(max.allocation * n < 1){
stop("Need to set max.allocation higher; not enough assets to add to 1")
}
Amat <- cbind(Amat, -diag(n))
bvec <- c(bvec, rep(-max.allocation, n))
}
# Calculate the number of loops based on how high to vary the risk premium and by what increment
loops <- risk.premium.up / risk.increment + 1
loop <- 1
# Initialize a matrix to contain allocation and statistics
# This is not necessary, but speeds up processing and uses less memory
eff <- matrix(nrow=loops, ncol=n+3)
# Now I need to give the matrix column names
colnames(eff) <- c(colnames(returns), "Std.Dev", "Exp.Return", "sharpe")
# Loop through the quadratic program solver
for (i in seq(from=0, to=risk.premium.up, by=risk.increment)){
dvec <- colMeans(returns) * i # This moves the solution up along the efficient frontier
sol <- solve.QP(covariance, dvec=dvec, Amat=Amat, bvec=bvec, meq=meq)
eff[loop,"Std.Dev"] <- sqrt(sum(sol$solution *colSums((covariance * sol$solution))))
eff[loop,"Exp.Return"] <- as.numeric(sol$solution %*% colMeans(returns))
eff[loop,"sharpe"] <- eff[loop,"Exp.Return"] / eff[loop,"Std.Dev"]
eff[loop,1:n] <- sol$solution
loop <- loop+1
}
return(as.data.frame(eff))
}
eff.frontier(returns)
data(stock99)
data(stock94Info)
mgm <- stockModel(stock99, drop=25, model='MGM', industry=stock94Info$industry)
#===> build optimal portfolios <===#
opMgm1 <- optimalPort(mgm)
opMgm2 <- optimalPort(mgm, Rf=0.004)
print(opMgm1)
summary(opMgm1)
#===> plot the optimal porfolios <===#
par(mfrow=c(1,2))
# these plots provide a "head coloring" of
# the allocation by optimalPort
plot(opMgm1)
plot(opMgm2)
#===> additional plotting 1 <===#
par(mfrow=c(1,1))
plot(opMgm1, addNames=TRUE)
#===> additional plotting 2 <===#
plot(opMgm1, optPortOnly=TRUE, colOP=2, pchOP=2)
points(opMgm2, colOP=2, pchOP=4)
data(stock99)
data(stock99)
data(stock94Info)
mgm <- stockModel(stock99, drop=25, model='MGM', industry=stock94Info$industry)
#===> build optimal portfolios <===#
opMgm1 <- optimalPort(mgm)
opMgm2 <- optimalPort(mgm, Rf=0.004)
print(opMgm1)
summary(opMgm1)
#===> plot the optimal porfolios <===#
par(mfrow=c(1,2))
# these plots provide a "head coloring" of
# the allocation by optimalPort
plot(opMgm1)
plot(opMgm2)
#===> additional plotting 1 <===#
par(mfrow=c(1,1))
plot(opMgm1, addNames=TRUE)
#===> additional plotting 2 <===#
plot(opMgm1, optPortOnly=TRUE, colOP=2, pchOP=2)
points(opMgm2, colOP=2, pchOP=4)
data(stock99)
data(stock94Info)
mgm <- stockModel(stock99, drop=25, model='MGM', industry=stock94Info$industry)
#===> build optimal portfolios <===#
opMgm1 <- optimalPort(mgm)
opMgm2 <- optimalPort(mgm, Rf=0.004)
print(opMgm1)
summary(opMgm1)
#===> plot the optimal porfolios <===#
par(mfrow=c(1,2))
# these plots provide a "head coloring" of
# the allocation by optimalPort
plot(opMgm1)
plot(opMgm2)
#===> additional plotting 1 <===#
par(mfrow=c(1,1))
plot(opMgm1, addNames=TRUE)
#===> additional plotting 2 <===#
plot(opMgm1, optPortOnly=TRUE, colOP=2, pchOP=2)
points(opMgm2, colOP=2, pchOP=4)
data(stock99)
data(stock94Info)
mgm <- stockModel(stock99, drop=25, model='MGM', industry=stock94Info$industry)
data(stock99)
stockModel(stockReturns = stock99)
stockModel(returns)
mgm<-stockModel(returns)
optimalPort(mgm)
optimalPort(mgm, shortSell = F)
op<-optimalPort(mgm, shortSell = F)
op<-optimalPort(mgm, shortSell = T)
plot(op)
plot(op)
par(mfrow=c(1,1))
plot(opMgm1, addNames=TRUE)
model<-stockModel(returns)
optimal<-optimalPort(model)
par(mfrow=c(1,1))
plot(optimal, addnamess=T)
model<-stockModel(returns)
optimal<-optimalPort(model)
par(mfrow=c(1,1))
plot(optimal, addnames=T)
model<-stockModel(returns)
optimal<-optimalPort(model)
par(mfrow=c(1,1))
plot(optimal, addNames=T)
model<-stockModel(returns)
optimal<-optimalPort(model)
par(mfrow=c(1,1))
plot(optimal, addNames=T)
portPossCurve(model)
model<-stockModel(returns)
optimal<-optimalPort(model)
par(mfrow=c(1,1))
plot(optimal, addNames=T)
lines(portPossCurve(model))
model<-stockModel(returns)
optimal<-optimalPort(model)
par(mfrow=c(1,1))
plot(optimal, addNames=T)
curve(portPossCurve(model))
portPossCurve(model)
portCloud(model)
prOp<-portReturn(model, optimal)
model<-stockModel(returns)
optimal<-optimalPort(model)
prOp<-portReturn(model, optimal)
model
optimal
prOp<-portReturn(model, optimal$X)
prOp
plot(prOp)
portPossCurve(prOp)
model<-stockModel(returns)
optimal<-optimalPort(model)
par(mfrow=c(1,1))
portPossCurve(model)
points(plot(optimal, addNames=T))
model<-stockModel(returns)
optimal<-optimalPort(model)
par(mfrow=c(1,1))
portPossCurve(model)
model<-stockModel(returns)
optimal<-optimalPort(model)
par(mfrow=c(1,1))
curve<-portPossCurve(model)
points(plot(optimal, addNames=T))
lines(curve)
optimal
optimal$X
optimal$risk
optimal$R
optimal$model
optimal$model$return
optimal$model$risk
optimal$model
optimal$model$marketReturns
optimal$model$n
optimal$model$R
optimal$model$sigma
model<-stockModel(returns)
optimal<-optimalPort(model)
par(mfrow=c(1,1))
portPossCurve(model)
points(plot(optimal$model$R, optimal$model$sigma, addNames=T))
model<-stockModel(returns)
optimal<-optimalPort(model)
par(mfrow=c(1,1))
portPossCurve(model)
points(plot(optimal$model$R, optimal$model$sigma))
portPossCurve(model)
model<-stockModel(returns)
optimal<-optimalPort(model)
par(mfrow=c(1,1))
plot(portPossCurve(model))
points(plot(optimal$model$R, optimal$model$sigma))
frontier<-function(returns){
model<-stockModel(returns)
optimal<-optimalPort(model)
par(mfrow=c(1,1))
plot(optimal, addNames=T)
portPossCurve(model)
portCloud(model)
}
frontier(returns)
frontier<-function(returns){
model<-stockModel(returns)
optimalPort(model)
par(mfrow=c(1,1))
plot(optimal, addNames=T)
portPossCurve(model)
}
frontier(returns)
frontier<-function(returns){
model<-stockModel(returns)
print(optimalPort(model))
par(mfrow=c(1,1))
plot(optimal, addNames=T)
portPossCurve(model)
}
frontier(returns)
returns$R
cov(returns$R)
model<-stockModel(returns)
print(optimalPort(model))
par(mfrow=c(1,1))
plot(optimal, addNames=T)
portPossCurve(model)
shiny::runApp('DDPProj')
model
model$returns
model$Rf
model$marketReturns
model$R
shiny::runApp('DDPProj')
model
model$R
optimalPort(model)
op<-optimalPort(model)
op$X
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
op$X
sapply(opX, function(x) paste("allocation: ", x))
sapply(op$X, function(x) paste("allocation: ", x))
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
returns<-getReturns(input$companies)
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
returns
data.table(returns)
library(data.table)
data.table(returns)
returns
as.data.frame(returns)
as.data.table(returns)
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
returns
returns$R
returns$ticker
returns$full
returns$R
returns$period
model$returns
model$R
as.data.frame(model$R)
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
model[2]
model[3]
model[4]
model[5]
model[1]
str(model)
rbind(model$ticker, model$R)
do.call(as.data.frame(rbind(model$ticker, model$R)))
as.data.frame(rbind(model$ticker, model$R))
as.data.frame(rbind( model$R))
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
returns<-getReturns(input$companies)
model<-stockModel(returns)
table<-as.data.frame(rbind(model$R))
returns
model<-stockModel(returns)
table<-as.data.frame(rbind(model$R))
table
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
table<-as.data.frame(cbind(model$R))
table
shiny::runApp('DDPProj')
model$R
model
model$R
op
op$X
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
op$X
model$R
100*model$R
10000*model$R
str(model)
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
op
str(op)
op$R
op$model
op$model$returns
str(op)
op$R
model
shiny::runApp('DDPProj')
op
op$exp
str(op)
op[expected returns]
op
op[Expected]
model
str(model)
1*model$returns
model$Rf
str(op)
op
op$R
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
?prettyNum
prettyNum(321)
prettyNum(321.11111111111111111)
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
plot(op, addNames=T)
plotPossCurve(model)
portPossCurve(model)
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
min = 0, max = 10000, value = 5000)
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
model
portPossCurve(model)
portPossCurve(model)
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shinyapps::setAccountInfo(name='budotron', token='C620CABF353C954E5CA7DFC84D6F4B57', secret='CXxpqWMkJQeqZmK8Rg3A/EEZeORN+vt2F4UeQa50')
install.packages("shinyapps")
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
library(Shiny)
library(shiny)
runApp("DDPProj")
shinyapps::setAccountInfo(name='budotron', token='C620CABF353C954E5CA7DFC84D6F4B57', secret='CXxpqWMkJQeqZmK8Rg3A/EEZeORN+vt2F4UeQa50')
deployApp()
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
shiny::runApp('DDPProj')
source('~/.active-rstudio-document', echo=TRUE)
setwd("/Volumes/Media and Stuff/code/DataProducts/DDPProject")
deployApp()
deployApp()
setwd("/Volumes/Media and Stuff/code/DataProducts")
setwd("/Volumes/Media and Stuff/code/DataProducts/DDPProject")
getwd()
setwd("~/Desktop/Data-Products")
shiny::runApp()
